pipeline {
    agent any
    
    environment {
        GITHUB_REPO = 'https://github.com/nova-mk3/frontend'
        GITHUB_CREDENTIALS_ID = 'frontend_github_token'  // GitHub ÏûêÍ≤© Ï¶ùÎ™Ö ID
    }
    
    
    stages {
        stage('GitHub Clone') {
        steps {
            script {
                echo "üîÑ Cloning repository..."
                sh 'rm -rf frontend || true'  // Í∏∞Ï°¥ Ìè¥Îçî ÏÇ≠Ï†ú
          
                 
                checkout([
                $class: 'GitSCM',
                branches: [[name: '*/main']],
                userRemoteConfigs: [[
                    url: env.GITHUB_REPO,
                    credentialsId: env.GITHUB_CREDENTIALS_ID
                ]],
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'frontend']]
])
            
          
                echo "‚úÖ Git Clone ÏôÑÎ£å!"
            }
        }
}

        stage('Inject .env.production') {
    steps {
        withCredentials([file(credentialsId: 'frontend_env_files', variable: 'ENV_FILE')]) {
            script {
                // frontend/apps/serviceÎ°ú Î≥µÏÇ¨
                dir('frontend/apps/service') {
                    sh "cp $ENV_FILE .env.production"
                    echo "‚úÖ service .env.production Î≥µÏÇ¨ ÏôÑÎ£å"
                }

                // frontend/apps/adminÏúºÎ°ú Î≥µÏÇ¨
                dir('frontend/apps/admin') {
                    sh "cp $ENV_FILE .env.production"
                    echo "‚úÖ admin .env.production Î≥µÏÇ¨ ÏôÑÎ£å"
                }
            }
        }
    }
}

        stage('Cleanup') {
            steps {
                script {
                    def composeFile = "frontend/docker-compose.yml"
                    if (fileExists(composeFile)) {  
                        echo "üßπ Cleaning up old Docker containers..."
                        
                        dir('frontend') {
                            sh '''
                            docker compose down --rmi all --volumes --remove-orphans || true
                            docker rmi frontend_admin_image:latest frontend_service_image:latest || true
                            '''
                        }
                    
                        echo "‚úÖ Cleanup ÏôÑÎ£å!"
                    } else {
                        echo "‚ö†Ô∏è frontend/docker-compose.yml not found. Skipping cleanup."
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    def composeFile = "frontend/docker-compose.yml"
                    if (fileExists(composeFile)) {  
                        echo "üöÄ Deploying Docker containers..."
                        dir('frontend') {
                            sh '''
                            docker compose up -d --build || (echo "‚ùå Deployment Failed!" && exit 1)
                            '''
                        }
                        echo "‚úÖ Deployment ÏôÑÎ£å!"
                    } else {
                        error "‚ùå docker-compose.yml not found! Stopping pipeline."
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "üéâ Deployment ÏÑ±Í≥µ! üöÄ"
        }
        failure {
            echo "‚ùå Deployment Ïã§Ìå®. Logs ÌôïÏù∏ ÏöîÎßù."
        }
    }
}
